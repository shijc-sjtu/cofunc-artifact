From a4c5385f8f8589d0e09814bb5d5760fb413992b5 Mon Sep 17 00:00:00 2001
From: Brijesh Singh <brijesh.singh@amd.com>
Date: Thu, 1 Jul 2021 09:06:58 +0800
Subject: [PATCH 81/99] exec/memory: Introduce MemoryRegion::ram_debug_ops
 callback

Currently, guest memory access for debugging purposes is
performed using memcpy(). Extend the 'struct MemoryRegion'
to include new callbacks that can be used to override the
use of memcpy() with something else.

The new callbacks can be used to display the guest memory
of an SEV guest by registering callbacks to the SEV memory
encryption/decryption APIs.

Typical usage:

mem_read(uint8_t *dest,
         const uint8_t *hva_src, hwaddr gpa_src,
         uint32_t len, MemTxAttrs attrs);
mem_write(uint8_t *hva_dest, hwaddr gpa_des,
          const uint8_t *src, uint32_t len, MemTxAttrs attrs);

MemoryRegionRAMReadWriteOps ops;
ops.read = mem_read;
ops.write = mem_write;

memory_region_init_ram(mem, NULL, "memory", size, NULL);
memory_region_set_ram_debug_ops(mem, ops);

Yuan Yao:
 - Add the gpa_src/gpa_des for read/write interface
 - Refactor the too long subject line

Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
Signed-off-by: Yuan Yao <yuan.yao@intel.com>
---
 include/exec/memory.h | 52 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/include/exec/memory.h b/include/exec/memory.h
index b5a48a7d42..0d67fde281 100644
--- a/include/exec/memory.h
+++ b/include/exec/memory.h
@@ -713,6 +713,19 @@ void ram_discard_manager_unregister_listener(RamDiscardManager *rdm,
 typedef struct CoalescedMemoryRange CoalescedMemoryRange;
 typedef struct MemoryRegionIoeventfd MemoryRegionIoeventfd;
 
+/* Memory Region RAM debug callback */
+typedef struct MemoryRegionRAMReadWriteOps MemoryRegionRAMReadWriteOps;
+
+struct MemoryRegionRAMReadWriteOps {
+    /* Write data into guest memory */
+    int (*write) (uint8_t *hva_dest, hwaddr gpa_des,
+                  const uint8_t *src, uint32_t len, MemTxAttrs attrs);
+    /* Read data from guest memory */
+    int (*read) (uint8_t *dest,
+                 const uint8_t *hva_src, hwaddr gpa_src,
+                 uint32_t len, MemTxAttrs attrs);
+};
+
 /** MemoryRegion:
  *
  * A struct representing a memory region.
@@ -758,6 +771,7 @@ struct MemoryRegion {
     unsigned ioeventfd_nb;
     MemoryRegionIoeventfd *ioeventfds;
     RamDiscardManager *rdm; /* Only for RAM */
+    const MemoryRegionRAMReadWriteOps *ram_debug_ops;
 };
 
 struct IOMMUMemoryRegion {
@@ -1431,6 +1445,44 @@ void memory_region_init_rom_nomigrate(MemoryRegion *mr,
                                       uint64_t size,
                                       Error **errp);
 
+/**
+ * memory_region_set_ram_debug_ops: Set access ops for a give memory region.
+ *
+ * @mr: the #MemoryRegion to be initialized
+ * @ops: a function that will be used when accessing @target region during
+ *       debug
+ */
+static inline void
+memory_region_set_ram_debug_ops(MemoryRegion *mr,
+                                const MemoryRegionRAMReadWriteOps *ops)
+{
+    mr->ram_debug_ops = ops;
+}
+
+/**
+ * memory_region_ram_debug_ops_read_available: check if ram_debug_ops->read
+ * is available
+ *
+ * @mr: the #MemoryRegion to be checked
+ */
+static inline bool
+memory_region_ram_debug_ops_read_available(MemoryRegion *mr)
+{
+    return mr->ram_debug_ops && mr->ram_debug_ops->read;
+}
+
+/**
+ * memory_region_ram_debug_ops_write_available: check if ram_debug_ops->write
+ * is available
+ *
+ * @mr: the #MemoryRegion to be checked
+ */
+static inline bool
+memory_region_ram_debug_ops_write_available(MemoryRegion *mr)
+{
+    return mr->ram_debug_ops && mr->ram_debug_ops->write;
+}
+
 /**
  * memory_region_init_rom_device_nomigrate:  Initialize a ROM memory region.
  *                                 Writes are handled via callbacks.
-- 
2.31.1

