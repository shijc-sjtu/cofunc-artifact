From d4ee8473d55db4d4cee390a6f6fa41824d367b6b Mon Sep 17 00:00:00 2001
From: Isaku Yamahata <isaku.yamahata@intel.com>
Date: Wed, 24 Nov 2021 22:01:29 -0800
Subject: [PATCH 46/99] i386/tdx: limit the number of in-flight request of TDX
 GetQuote

TD guest can issue many in-flight GetQuote request.  Limit the total number
of in-flight requests to prevent potential DoS attack.

Signed-off-by: Isaku Yamahata <isaku.yamahata@intel.com>
---
 target/i386/kvm/tdx.c | 21 ++++++++++++++++++---
 target/i386/kvm/tdx.h |  3 +++
 2 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/target/i386/kvm/tdx.c b/target/i386/kvm/tdx.c
index 1ffdd52903..6659dbf37b 100644
--- a/target/i386/kvm/tdx.c
+++ b/target/i386/kvm/tdx.c
@@ -626,8 +626,6 @@ static void tdx_guest_class_init(ObjectClass *oc, void *data)
 #define TDG_VP_VMCALL_SUCCESS           0x0000000000000000ULL
 #define TDG_VP_VMCALL_INVALID_OPERAND   0x8000000000000000ULL
 
-#define TDX_GET_QUOTE_MAX_BUF_LEN   (128 * 1024)
-
 #define TDX_GET_QUOTE_STRUCTURE_VERSION 1ULL
 
 /*
@@ -642,6 +640,10 @@ static void tdx_guest_class_init(ObjectClass *oc, void *data)
 #define TDX_GET_QUOTE_STATUS_SUCCESS    0ULL
 #define TDX_GET_QUOTE_STATUS_ERROR      0x8000090100000000ULL
 
+/* Limit to avoid resource starvation. */
+#define TDX_GET_QUOTE_MAX_BUF_LEN       (128 * 1024)
+#define TDX_MAX_GET_QUOTE_REQUEST       16
+
 /* Format of pages shared with guest. */
 struct tdx_get_quote_header {
     /* Format version: must be 1 in little endian. */
@@ -732,6 +734,8 @@ static void tdx_handle_get_quote_connected(QIOTask *task, gpointer opaque)
     int ret;
     struct x86_msi x86_msi;
     struct kvm_msi msi;
+    MachineState *ms;
+    TdxGuest *tdx;
 
     assert(32 <= t->event_notify_interrupt && t->event_notify_interrupt <= 255);
     t->hdr.error_code = cpu_to_le64(TDX_GET_QUOTE_STATUS_ERROR);
@@ -838,6 +842,14 @@ error:
     object_unref(OBJECT(t->ioc));
     g_free(in_data);
     g_free(out_data);
+
+    /* Maintain the number of in-flight requests. */
+    ms = MACHINE(qdev_get_machine());
+    tdx = TDX_GUEST(ms->cgs);
+    qemu_mutex_lock(&tdx->lock);
+    tdx->quote_generation_num--;
+    qemu_mutex_unlock(&tdx->lock);
+
     return;
 }
 
@@ -890,12 +902,15 @@ static void tdx_handle_get_quote(X86CPU *cpu, struct kvm_tdx_vmcall *vmcall)
 
     qemu_mutex_lock(&tdx->lock);
     if (tdx->event_notify_interrupt < 32 || 255 < tdx->event_notify_interrupt ||
-        !tdx->quote_generation) {
+        !tdx->quote_generation ||
+        /* Prevent too many in-flight get-quote request. */
+        tdx->quote_generation_num >= TDX_MAX_GET_QUOTE_REQUEST) {
         qemu_mutex_unlock(&tdx->lock);
         object_unref(OBJECT(ioc));
         g_free(t);
         return;
     }
+    tdx->quote_generation_num++;
     t->event_notify_interrupt = tdx->event_notify_interrupt;
     qio_channel_socket_connect_async(
         ioc, tdx->quote_generation, tdx_handle_get_quote_connected, t, g_free,
diff --git a/target/i386/kvm/tdx.h b/target/i386/kvm/tdx.h
index a68a4c0d0d..34037e1508 100644
--- a/target/i386/kvm/tdx.h
+++ b/target/i386/kvm/tdx.h
@@ -47,6 +47,9 @@ typedef struct TdxGuest {
 
     /* runtime state */
     int event_notify_interrupt;
+
+    /* GetQuote */
+    int quote_generation_num;
     char *quote_generation_str;
     SocketAddress *quote_generation;
 } TdxGuest;
-- 
2.31.1

